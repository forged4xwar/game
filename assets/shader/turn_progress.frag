{
  "sksl": {
    "entrypoint": "turn_progress_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float iTime;\nuniform vec2 iResolution;\nuniform float progress;\n\nvec4 fragColor;\n\nvec3 fireColor;\nvec3 smokeColor;\nfloat thickness;\nfloat direction;\nfloat radius;\nfloat intensity;\nfloat inner;\nfloat smokeSmoothness;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_angleToClockLike(vec2 uv)\n{\n    float angle = atan(-uv.y, -uv.x) + 3.1415927410125732421875;\n    return mod(angle + 1.57079637050628662109375, 6.283185482025146484375);\n}\n\nvec3 FLT_flutter_local_polarMap(vec2 uv, float direction_1, float shift, float radius_1, inout float intensity_1, float inner_1)\n{\n    intensity_1 = 40.0 / intensity_1;\n    vec2 param = uv;\n    float angle = FLT_flutter_local_angleToClockLike(param);\n    float px = ((direction_1 * angle) / 6.283185482025146484375) + shift;\n    float py = ((length(uv) * (1.0 + ((inner_1 * 2.0) * intensity_1))) - ((inner_1 * 1.0) * intensity_1)) + (intensity_1 - (radius_1 * intensity_1));\n    return vec3(px, py, angle);\n}\n\nfloat FLT_flutter_local_rand(vec2 n)\n{\n    return fract(sin(dot(n, vec2(12.98980045318603515625, 12.14140033721923828125))) * 83758.546875);\n}\n\nfloat FLT_flutter_local_noise(vec2 n)\n{\n    vec2 b = floor(n);\n    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    vec2 param = b;\n    vec2 param_1 = b + vec2(1.0, 0.0);\n    vec2 param_2 = b + vec2(0.0, 1.0);\n    vec2 param_3 = b + vec2(1.0);\n    return mix(mix(FLT_flutter_local_rand(param), FLT_flutter_local_rand(param_1), f.x), mix(FLT_flutter_local_rand(param_2), FLT_flutter_local_rand(param_3), f.x), f.y);\n}\n\nfloat FLT_flutter_local_fire(vec2 n)\n{\n    vec2 param = n;\n    vec2 param_1 = n * 2.099999904632568359375;\n    vec2 param_2 = n * 5.400000095367431640625;\n    return (FLT_flutter_local_noise(param) + (FLT_flutter_local_noise(param_1) * 0.60000002384185791015625)) + (FLT_flutter_local_noise(param_2) * 0.4199999868869781494140625);\n}\n\nfloat FLT_flutter_local_shade(inout vec2 uv, float t, float smokeSmoothness_1)\n{\n    float _228;\n    if (uv.y < 0.5)\n    {\n        _228 = 23.0 + (t * 0.0350000001490116119384765625);\n    }\n    else\n    {\n        _228 = (-11.0) + (t * 0.02999999932944774627685546875);\n    }\n    uv.x += _228;\n    uv.x *= smokeSmoothness_1;\n    uv.y = 0.89999997615814208984375 * abs(uv.y - 0.5);\n    vec2 param = uv - vec2(t);\n    float r = FLT_flutter_local_fire(param);\n    return pow((2.0 * uv.y) * r, 4.0);\n}\n\nvec3 FLT_flutter_local_ramp(float t, vec3 fireColor_1)\n{\n    bvec3 _196 = bvec3(t <= 0.5);\n    vec3 color = vec3(_196.x ? fireColor_1.x : smokeColor.x, _196.y ? fireColor_1.y : smokeColor.y, _196.z ? fireColor_1.z : smokeColor.z);\n    return color / vec3(t);\n}\n\nvec3 FLT_flutter_local_color(inout float grad, float thickness_1)\n{\n    float m2 = 2.5;\n    grad = (sqrt(grad) * 1.0) / thickness_1;\n    float param = grad;\n    vec3 param_1 = fireColor;\n    vec3 color = FLT_flutter_local_ramp(param, param_1);\n    color /= (vec3(m2) + max(vec3(0.0), color));\n    return color;\n}\n\nvoid FLT_main()\n{\n    fireColor = vec3(2.0, 0.4000000059604644775390625, 2.0);\n    smokeColor = vec3(2.0, 0.4000000059604644775390625, 2.0);\n    thickness = 1.0;\n    direction = -1.0;\n    radius = 0.810000002384185791015625;\n    intensity = 2.0;\n    inner = 1.0;\n    smokeSmoothness = 50.0;\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 uv = fragCoord / iResolution;\n    uv.x *= (iResolution.x / iResolution.y);\n    uv -= vec2(0.5);\n    float t = iTime;\n    vec2 param_2 = uv;\n    float param_3 = direction;\n    float param_4 = 0.0;\n    float param_5 = radius;\n    float param_6 = intensity;\n    float param_7 = inner;\n    vec3 _335 = FLT_flutter_local_polarMap(param_2, param_3, param_4, param_5, param_6, param_7);\n    vec3 polar = _335;\n    float fullAngle = (progress * 2.0) * 3.1415927410125732421875;\n    if (polar.z > fullAngle)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    vec2 param_8 = polar.xy;\n    float param_9 = t;\n    float param_10 = smokeSmoothness;\n    float _360 = FLT_flutter_local_shade(param_8, param_9, param_10);\n    float param_11 = _360;\n    float param_12 = thickness;\n    vec3 _364 = FLT_flutter_local_color(param_11, param_12);\n    vec3 c1 = _364;\n    float startCap = 0.100000001490116119384765625;\n    if (polar.z < startCap)\n    {\n        c1 *= (0.300000011920928955078125 + ((0.699999988079071044921875 * polar.z) / startCap));\n    }\n    float endCap = 0.100000001490116119384765625;\n    if (polar.z > (fullAngle - endCap))\n    {\n        float perc = 1.0 - ((polar.z - (fullAngle - endCap)) / endCap);\n        c1 *= (0.300000011920928955078125 + (0.699999988079071044921875 * perc));\n    }\n    float alpha = length(c1) * 2.0;\n    fragColor = vec4(c1, alpha);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "iTime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "iResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "progress",
        "rows": 1,
        "type": 10
      }
    ]
  }
}