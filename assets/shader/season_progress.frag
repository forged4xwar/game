{
  "sksl": {
    "entrypoint": "season_progress_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float iTime;\nuniform vec2 iResolution;\nuniform float progress;\nuniform float sections;\nuniform vec4 hues[4];\n\nvec4 fragColor;\n\nfloat pi;\nfloat oneDegreeInRadian;\nfloat fragAngle;\nfloat fragDist;\nvec2 uv;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_addCircles(vec2 uv_1)\n{\n    float diff = length(uv_1);\n    float scale = 4.0;\n    float func = exp(-abs(sin((scale * pi) * diff)));\n    return ((1.0 - step(1.0, diff)) * smoothstep(0.699999988079071044921875, 1.0, func)) * step(0.300000011920928955078125, diff);\n}\n\nfloat FLT_flutter_local_lineSegDist(vec2 uv_1, inout vec2 ba)\n{\n    vec2 pa = uv_1 - ba;\n    ba = -ba;\n    return length(pa - (ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)));\n}\n\nfloat FLT_flutter_local_addRadii2(vec2 uv_1)\n{\n    float d = 360.0 / sections;\n    float alpha = d * oneDegreeInRadian;\n    float edge = floor((fragAngle / alpha) + float(0.5));\n    float angle = ((edge / (360.0 / d)) * 2.0) * pi;\n    angle -= (pi / 2.0);\n    angle = mod(angle, 2.0 * pi);\n    vec2 end = vec2(cos(angle), sin(angle));\n    vec2 param = uv_1;\n    vec2 param_1 = end;\n    float _124 = FLT_flutter_local_lineSegDist(param, param_1);\n    float line = _124;\n    float r = 1.0 - step(0.00999999977648258209228515625, line);\n    return (1.0 - step(1.2000000476837158203125, length(uv_1))) * r;\n}\n\nfloat FLT_flutter_local_noise(vec2 st)\n{\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = dot(i, vec2(127.09999847412109375, 311.70001220703125));\n    float b = dot(i + vec2(1.0, 0.0), vec2(127.09999847412109375, 311.70001220703125));\n    float c = dot(i + vec2(0.0, 1.0), vec2(127.09999847412109375, 311.70001220703125));\n    float d = dot(i + vec2(1.0), vec2(127.09999847412109375, 311.70001220703125));\n    vec4 h = fract(sin(vec4(a, b, c, d)) * 43758.546875);\n    vec2 u = (f * f) * (vec2(3.0) - (f * 2.0));\n    return mix(mix(h.x, h.y, u.x), mix(h.z, h.w, u.x), u.y);\n}\n\nfloat FLT_flutter_local_circumferentialNoise(float distance, float angle, float time)\n{\n    vec2 st = vec2((angle * 0.89999997615814208984375) + time, distance * 3.0);\n    float n = 0.0;\n    vec2 param = st;\n    n += (FLT_flutter_local_noise(param) * 1.0);\n    vec2 param_1 = st * 2.0;\n    n += (FLT_flutter_local_noise(param_1) * 0.5);\n    vec2 param_2 = st * 4.0;\n    n += (FLT_flutter_local_noise(param_2) * 0.25);\n    n /= 1.75;\n    return n;\n}\n\nfloat FLT_flutter_local_drawCurrentArea(float angle)\n{\n    float diff = fragAngle - angle;\n    float edge = diff / pi;\n    float area = 1.0 - smoothstep(0.0, 0.001000000047497451305389404296875, edge);\n    float param = fragDist;\n    float param_1 = fragAngle;\n    float param_2 = iTime * 0.20000000298023223876953125;\n    float noiseValue = FLT_flutter_local_circumferentialNoise(param, param_1, param_2);\n    area *= (1.0 + (noiseValue * 1.5));\n    return area;\n}\n\nfloat FLT_flutter_local_drawArm(vec2 uv_1, inout float angle)\n{\n    angle -= (pi / 2.0);\n    vec2 end = vec2(cos(angle), sin(angle));\n    vec2 param = uv_1;\n    vec2 param_1 = end;\n    float _325 = FLT_flutter_local_lineSegDist(param, param_1);\n    return 1.0 - step(0.00999999977648258209228515625, _325);\n}\n\nvoid FLT_main()\n{\n    pi = 3.1415927410125732421875;\n    oneDegreeInRadian = 0.01745329238474369049072265625;\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    uv = ((fragCoord / iResolution) * 2.0) - vec2(1.0);\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    fragAngle = (atan(-uv.y, -uv.x) + pi) + (pi / 2.0);\n    fragAngle = mod(fragAngle, 2.0 * pi);\n    fragDist = length(uv);\n    int id = int(floor((fragAngle / (2.0 * pi)) * sections));\n    vec3 hue = hues[id].xyz;\n    vec3 color = vec3(0.0);\n    vec2 param_2 = uv;\n    color += ((hue * FLT_flutter_local_addCircles(param_2)) * 1.0);\n    vec2 param_3 = uv;\n    color += ((hue * FLT_flutter_local_addRadii2(param_3)) * 0.800000011920928955078125);\n    float progressAngle = (progress * 2.0) * pi;\n    float dist = length(uv);\n    float grad = 1.0 - smoothstep(0.0, 1.7999999523162841796875, dist);\n    float param_4 = progressAngle;\n    color += ((hue * FLT_flutter_local_drawCurrentArea(param_4)) * grad);\n    vec2 param_5 = uv;\n    float param_6 = progressAngle;\n    float _441 = FLT_flutter_local_drawArm(param_5, param_6);\n    color += ((hue * _441) * grad);\n    float alpha = float(length(color) > 0.001000000047497451305389404296875);\n    fragColor = vec4(color, alpha);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "iTime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "iResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "progress",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "sections",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 4,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "hues",
        "rows": 4,
        "type": 10
      }
    ]
  }
}